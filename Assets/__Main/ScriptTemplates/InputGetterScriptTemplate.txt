using UnityEngine;
using UnityEngine.InputSystem;

namespace IA
{
    public class InputGetter : MonoBehaviour
    {
        #region
        IA _inputs;

        public static InputGetter Instance { get; set; } = null;

        void Awake()
        {
            if (Instance == null)
            {
                Instance = this;
            }
            else
            {
                Destroy(gameObject);
            }

            _inputs = new IA();

            Link(true);
        }

        void OnDestroy()
        {
            Link(false);

            _inputs.Dispose();
        }

        void OnEnable()
        {
            _inputs.Enable();
        }

        void OnDisable()
        {
            _inputs.Disable();
        }
        #endregion

        #region
        public bool Map_IsAction { get; private set; } = false;

        public Vector2 Map_ValueAction { get; private set; } = Vector2.zero;
        #endregion

        #region
        void LateUpdate()
        {
            if (Map_IsAction) Map_IsAction = false;
        }
        #endregion

        #region
        void Link(bool isLink)
        {
            if (isLink)
            {
                _inputs.Map.Action.performed += Map_OnAction;

                _inputs.Map.Action.started += Map_ReadAction;
                _inputs.Map.Action.performed += Map_ReadAction;
                _inputs.Map.Action.canceled += Map_ReadAction;

            }
            else
            {
                _inputs.Map.Action.performed -= Map_OnAction;

                _inputs.Map.Action.started -= Map_ReadAction;
                _inputs.Map.Action.performed -= Map_ReadAction;
                _inputs.Map.Action.canceled -= Map_ReadAction;
            }
        }
        #endregion

        #region
        void Map_OnAction(InputAction.CallbackContext context) { Map_IsAction = true; }

        void Map_ReadAction(InputAction.CallbackContext context) { Map_ValueAction = context.ReadValue<Vector2>(); }
        #endregion
    }
}